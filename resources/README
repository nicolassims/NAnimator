Enums:
  Shapes           -- A list of the types of shapes the models/views/etc. support.
    <Currently supported: ellipse, rectangle>

Interfaces:        -- (Note implementations are listed directly, not accounting for chains.)
  Animation        -- implemented by AnimationImpl.
  AnimationBuilder -- implemented by Builder.
  AppendableWriter -- implemented by nothing, contains a static method.
  EditorView       -- implemented by EditorViewImpl.
  Keyframe         -- implemented by KeyframeImpl.
  Motion           -- implemented by MotionImpl.
  Position         -- implemented by Position2D.
  Shape            -- implemented by ShapeImpl.
  Size             -- implemented by Size2D.
  TextBasedView    -- implemented by SVGViewImpl, TextualViewImpl.
  Texture          -- implemented by Texture2D.
  TimeBasedView    -- implemented by VisualViewImpl, SVGViewImpl.
  View             -- implemented by TextBasedView, TimeBasedView, VisualView.
  ViewFactory      -- implemented by ViewFactoryImpl.
  VisualView       -- implemented by VisualViewImpl.

Classes:
  AnimationImpl    -- Represents a collection of Shapes that could be displayed during one animation.
  AnimationPanel   -- A Java Swing Panel capable of drawing animations.
  AnimationReader  -- A helper to read animation data and construct an animation from it.
  EditorViewImpl   -- Represents a view that contains a VisualView, and can edit it.
  KeyframeImpl     -- Represents a collection of qualities that some shape could display at one tick.
  MotionImpl       -- Represents a motion affecting one shape across some range of ticks.
  Position2D       -- Represents the position of a shape in a 2D plane.
  ShapeImpl        -- Represents a shape, and every motion it will go through is stored within.
  Size2D           -- Represents the size of an object described by width and height dimensions.
  SVGViewImpl      -- Represents the formatted text used to create an SVG File.
  TextualViewImpl  -- Represents the formatted text that can be used to create an Animation.
  TextureImpl      -- Represents a color that some shape could display.
  ViewFactoryImpl  -- Builds a view based on the string parameter passed in to its getView.
  VisualViewImpl   -- Interprets and draws an animation model on a JavaFx window.

Implementation notes:
  In SVG files, a shape is invisible up until its first motion occurs.
  Default ticksPerSecond is 1.
  Default output location is System.out.

Notes for file I/O:
  If files read are placed in resources file, then their -in path must start with "resources/".
  Generated files are similarly placed in resources file.

Design *changes* since last assignment:
  We added a lot of new getters so the view and model could communicate more easily.

======INTERFACES======

=============
= Animation =
=============
Interface implemented by AnimationImpl. Highest-level interface structure. Contains methods used to
  interact with the model its implementation contains. Also has a getBuilder() to use to modify a
  pre-existent animation.

====================
= AnimationBuilder =
====================
Interface implemented by Builder, a public static final class within AnimationImpl. Contains
  methods for adding, deleting, setting and changing keyframes within an AnimationImpl's model.
  Also has various other edit-based methods for shapes, motions, and the bounds of the Animation.

====================
= AppendableWriter =
====================
Unimplemented Interface. Contains a static method for writing to a passed-in appendable, whether
  that's System.out or a FileWriter.

==============
= EditorView =
==============
Interface implemented by EditorViewImpl. Contains methods for controlling the EditorView--playing
  the animation, pausing it, changing its speed, etc.

============
= Keyframe =
============
Interface implemented by KeyframeImpl. Contains methods, getters, for accessing the Qualities
  therein.

==========
= Motion =
==========
Interface implemented by MotionImpl. Contains two Keyframes, getters for accessing those keyframes,
  and setters to make the keyframes something new, which are used indirectly through
  AnimationBuilder's keyframe methods.

============
= Position =
============
Interface implemented by Position2D. Contains getters to access x, y, and z ints. We don't deal in
  the fourth dimension here.

=========
= Shape =
=========
Interface implemented by ShapeImpl. Imlementation contains a list of motions. Contains getters for
  various fields. Also contains getters to determine value of a sub-field at an arbitrary time,
  through linear interpolation.

========
= Size =
========
Interface implemented by Size2D. Contains getters to access width and height fields.

=================
= TextBasedView =
=================
Common interface between all views that print text to some output destination, be that the console,
  a file, etc. Contains the public method setOutputDestination() which is self-explanatory.
  Implemented by SVGViewImpl and TextualViewImpl.

===========
= Texture =
===========
Interface implemented by TextureImpl. Contains getters for rgb and alpha, funnily enough.

=================
= TimeBasedView =
=================
Common interface between all views that use ticksPerSecond, as opposed to merely unitless ticks.
  Contains the public method setTicksPerSecond() which can be used to... well, that's obvious.
  Implemented by SVGViewImpl, EditorViewImpl, and VisualView.

========
= View =
========
Common interface between all views. Contains the public method displayView() which can be used to
  display an animation in different ways depending on the instance of Animation view being
  implemented. Implemented by TextBasedView, TimeBasedView, and VisualView.

===============
= ViewFactory =
===============
An Interface implemented by ViewFactoryImpl. Has a method that returns a specific type of view
  based on the string passed in.

==============
= VisualView =
==============
Interface implemented by VisualViewImpl. Contains public methods setCurrentTick(), which sets the
  current tick the animation is playing, refresh(), which refreshes the view's representation after
  setting a new current tick, getTicksPerSecond(), which returns the number of ticks per second the
  animation is running at right now, setTitle(), which gives the window a title, and makeVisible(),
  which allows the view to display.

======CLASSES======

=================
= AnimationImpl =
=================
Represents a collection of Shapes that could be displayed during one animation. Contains a Map of
  Shapes, a List of the Shapes' names, a stack used to keep track of the last tick in the
  AnimationImpl, and four ints used to keep track of the location of the left-hand side of the
  AnimationImpl, its top side's location, its width, and its height.

==================
= AnimationPanel =
==================
A Java Swing Panel capable of drawing animations. It extends JPanel, contains an Animation which it
  will draw, and has an int keeping track of its current tick.

===================
= AnimationReader =
===================
A helper to read animation data and construct an animation from it. Contains no fields, but has
  several methods that help it read from a list of specifically formatted text, such as the kind
  seen in smalldemo.txt.

==================
= EditorViewImpl =
==================
Represents a view that contains a VisualView, and can edit it. As of the writing of this README, it
  was still in progress. Here's hoping we remember to add something later.

================
= KeyframeImpl =
================
Represents a collection of Qualities that some shape could display at one tick. Contains a Quality
  for position, size and color, and an int to represent the tick when these qualities are shown.

==============
= MotionImpl =
==============
Represents a motion affecting one shape across some range of ticks. Contains two keyframes, as well
  as a reference to its parent, which is needed when asking the motion to print its parent's name.
  I wish I had a reference to my parent... ¯\_(ツ)_/¯

==============
= Position2D =
==============
Represents the position of a shape in a 2D plane. Contains an x and a y double, which are really
  pretty self-explanatory.

=============
= ShapeImpl =
=============
Represents a shape, and every motion it will go through is stored within. To put it another way, it
  contains a list of Motions. It also contains a Shapes Enum signifying what kind of shape it is, a
  String name, a stack of integers used to keep track of the last tick in all its keyframes, and a
  boolean indicating whether it's visible.

==========
= Size2D =
==========
Represents the size of an object described by width and height dimensions. Contains doubles of the
  same.



             -- Represents the size of an object described by width and height dimensions.
  SVGViewImpl      -- Represents the formatted text used to create an SVG File.
  TextualViewImpl  -- Represents the formatted text that can be used to create an Animation.
  TextureImpl      -- Represents a color that some shape could display.
  ViewFactoryImpl  -- Builds a view based on the string parameter passed in to its getView.
  VisualViewImpl